/**
 * @file 2.15.cc
 * @brief maximum sub array in two-dimensional
 * @author Qing Xu, xuqinguestc@163.com
 * @version 0.1.00
 * @date 2014-08-05
 */

#include <bits/stdc++.h>
using namespace std;

int maxSubArray(const vector<int> &A)
{
    const int n = A.size();
    int global=A[0],local=0;
    for(int i=0;i<n;++i)
    {
        if(local<0)local=0;
        local+=A[i];
        if(global< local) global=local;
    }
    return global;
}
//m*n
int maxSum(const vector<vector<int> > &A, int m,int n)
{
    //compute all lines
    vector<vector<int> > sum(m+1,vector<int>(n+1,0));//sub sum
    //compute all sub sum

    for(int i=1;i<m+1;++i)
    {
        for(int j=1;j<n+1;++j)
        {
            sum[i][j] = sum[i-1][j] + sum[i][j-1] + A[i-1][j-1] - sum[i-1][j-1];
        }
    }
/*
    cout << "sub array:" << endl;
    for(int i=0;i<m+1;++i)
    {
        for(int j=0;j<n+1;++j)
            cout << sum[i][j] << "\t";
        cout << endl;
    }

    cout << endl;
*/
    int ret=INT_MIN;
    vector<int> tmp(n+1,0);
    for(int i=1;i<=m;++i)
    {
        for(int j=i;j<=m;++j)
        {
            //compute [i,j] sub sum
            for(int k=1; k<=n;++k)
            {
                tmp[k] = sum[j][k]-sum[i-1][k] -sum[j][k-1]+sum[i-1][k-1];
            }
 /*           cout << "i = " << i << " j = " << j << endl;
            for(int l=0;l<=n;++l)
                cout << tmp[l] << "\t";
            cout << endl;
*/
            ret = max(ret,maxSubArray(tmp));
        }
    }
    return ret;
}

int main(void)
{
    int n;
    cin >> n;
    vector<vector<int> > vec(n,vector<int>(n,0));
    for(int i=0;i<n;++i)
    {
        for(int j=0;j<n;++j)
        {
            cin >>vec[i][j];
        }
    }
    cout << maxSum(vec,m,n) << endl;
    return 0;
}
